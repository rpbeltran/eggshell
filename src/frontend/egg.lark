?start: "SEMICOLON"* line*


# -- Top Level --

?line: top_level_expression "SEMICOLON"*

?top_level_expression: append_to_file
                     | non_atomic
                     | try_catch
                     | if_statement
                     | with_block
                     | loop
                     | define_class
                     | define_derived_class
                     | define_function
                     | continue_expr
                     | break_expr
                     | return_expr
                     | import
                     | assertion
                     | say

?non_atomic: pipeline | expression | declaration | reassignment


# -- Atomics --

?atomic: exec
       | function_pointer
       | lambda_func
       | logical_sequence
       | do_block
       | selectable_atomic
       | selection_lambda_shorthand

?selectable_atomic: id_or_field
                  | paren_expr
                  | select
                  | function_call
                  | list
                  | map
                  | comprehension
                  | range
                  | async_expr
                  | literal

?paren_expr: "PAREN_OPEN" non_atomic "PAREN_CLOSE"

?literal: string_literal
       | integer_literal
       | float_literal
       | unit_integer_literal
       | unit_float_literal
       | boolean_literal

string_literal: QUOTED_STRING
integer_literal: INTEGER
float_literal: FLOAT
unit_integer_literal: UNIT_INTEGER
unit_float_literal: UNIT_FLOAT
boolean_literal: TRUE | FALSE


# -- Identifiers and Namespaces --

?id_or_field: identifier | implicit_lambda_param | select_field
select_field: selectable_atomic "DOT" NAME
identifier: (NAME "NAMESPACE")*  NAME
implicit_lambda_param: "IMPLICIT_LAMBDA_PARAM"


# -- Function Pointers --

import: "IMPORT" QUOTED_STRING


# -- Function Pointers --

function_pointer: id_or_field "ELLIPSIS"


# -- Selection Shorthand Lambdas --

selection_lambda_shorthand: "ELLIPSIS" NAME ("DOT" NAME)*


# -- Type Constraints --

?type: id_or_field type_generic?
type_generic: "SQUARE_OPEN" _type_generic_inner "SQUARE_CLOSE"
_type_generic_inner: type ("COMMA" type)*


# -- Variable Assignment And Declaration --

?declaration: declare_typed_variable
            | declare_untyped_variable
            | declare_typed_constant
            | declare_untyped_constant

declare_typed_variable: "VAR"? NAME "COLON" type "ASSIGN" expression
declare_untyped_variable: "VAR"? NAME "DECLARE" expression

declare_typed_constant: "CONST" NAME "COLON" type "ASSIGN" expression
declare_untyped_constant: "CONST" NAME "DECLARE" expression

?reassignment: reassign
             | plus_assign
             | minus_assign
             | times_assign
             | divide_assign
             | mod_assign
             | pipe_assign
             | power_assign
             | int_div_assign
             | concat_assign
             | seq_and_assign
             | seq_or_assign
reassign: id_or_field "ASSIGN" expression
plus_assign: id_or_field "PLUS_ASSIGN" expression
minus_assign: id_or_field "MINUS_ASSIGN" expression
times_assign: id_or_field "TIMES_ASSIGN" expression
divide_assign: id_or_field "DIVIDE_ASSIGN" expression
mod_assign: id_or_field "MOD_ASSIGN" expression
pipe_assign: id_or_field "PIPE_ASSIGN" expression
power_assign: id_or_field "POWER_ASSIGN" expression
int_div_assign: id_or_field "INT_DIV_ASSIGN" expression
concat_assign: id_or_field "CONCAT_ASSIGN" expression
seq_and_assign: id_or_field "SEQ_AND_ASSIGN" expression
seq_or_assign: id_or_field "SEQ_OR_ASSIGN" expression


# -- Classes --

define_class: "CLASS" NAME "CURLY_OPEN" _class_inner "CURLY_CLOSE"
define_derived_class: "CLASS" NAME "COLON" id_or_field "CURLY_OPEN" _class_inner "CURLY_CLOSE"
_class_inner: "SEMICOLON"* class_fields "SEMICOLON"* class_methods
class_fields: (class_field "SEMICOLON"+)*
?class_field: class_field_typed | class_field_untyped
class_field_typed: NAME "COLON" type ("ASSIGN" expression)?
class_field_untyped: NAME ("DECLARE" expression)?
class_methods: (define_function "SEMICOLON"*)*


# -- Lists --

list: "SQUARE_OPEN" _list_inner? "SQUARE_CLOSE"
_list_inner: expression ("COMMA" expression)*

range: "SQUARE_OPEN" _range_inner "SQUARE_CLOSE"
     | "PAREN_OPEN" _range_inner "PAREN_CLOSE"
_range_inner: expression "RANGE" expression


# -- Maps --

map: "CURLY_OPEN" _map_inner? "CURLY_CLOSE"
_map_inner: map_entry ("COMMA" map_entry)*
map_entry: expression "COLON" expression


# -- Comprehensions --

?comprehension: list_comprehension | map_comprehension

list_comprehension: "SQUARE_OPEN" _list_comp_inner "SQUARE_CLOSE"
_list_comp_inner: expression "FOR" NAME "IN" expression

map_comprehension: "CURLY_OPEN" _map_comp_inner "CURLY_CLOSE"
_map_comp_inner: expression "COLON" expression "FOR" NAME "IN" expression


# -- File Redirection --

append_to_file: pipeline "APPEND_FILE" expression


# -- If / Else --

if_statement: "IF" expression block elif_statement* else_statement?
elif_statement: "ELSE" "IF" expression block | "ELIF" atomic block
else_statement: "ELSE" block


# -- Pipelines --

exec: EXEC_ARG+
?pipeline: expression ("PIPE" expression)+


# -- Code Blocks --

block: "CURLY_OPEN" "SEMICOLON"* line* "CURLY_CLOSE"


# -- Say --

say: "SAY" expression


# -- ASYNC --

async_expr: "ASYNC" (paren_expr | block)


# -- With Blocks--

with_block: "WITH" expression ("AS" NAME)? block


# -- Error Handling --

try_catch: try_catch_bound | try_catch_unbound
try_catch_bound: "TRY" block "CATCH" NAME ("COLON" type)? block
try_catch_unbound: "TRY" block ("CATCH" block)?

logical_sequence: and_sequence | or_sequence
and_sequence: atomic "SEQ_AND" atomic
or_sequence:  atomic "SEQ_OR" atomic

assertion: "ASSERT" expression

# -- Functions --

define_function : "FN" NAME param_list func_type? block

param_list : "PAREN_OPEN" _param_list_inner "PAREN_CLOSE"
_param_list_inner: param ("COMMA" param)* ("COMMA" star_param)? ("COMMA" kw_param)?
              | star_param ("COMMA" kw_param)?
              | kw_param?


?param: NAME (param_type)? (param_default)?
star_param: "TIMES" NAME (param_type)?
kw_param: "POWER" NAME (param_type)?

param_type: "COLON" type
param_default: "ASSIGN" expression
?func_type: "COLON" atomic

return_expr : "RETURN" expression


# -- Do Blocks --

do_block: "DO" block


# -- Lambdas --

lambda_func: "LAMBDA" (param_list | param | star_param | kw_param) "ARROW" expression
           | "LAMBDA" (param_list | param | star_param | kw_param) block


# -- Function Calls --

function_call: atomic "PAREN_OPEN" arg_list "PAREN_CLOSE"
arg_list: (arg ("COMMA" arg)*)?

?arg: expression | kwarg
kwarg: NAME "ASSIGN" expression


# -- Loops --

?loop: always_loop | for | while_statement
always_loop: "ALWAYS_LOOP" label? block
for: "FOR" NAME "IN" expression label? block
while_statement: "WHILE" expression label? block

label: "AS" NAME

continue_expr : "CONTINUE" NAME?
break_expr : "BREAK" NAME?


# -- Arithmetic --

?expression: arithmetic_curry

# --- Currying

?arithmetic_curry: curried_func | arithmetic_or

curried_func: arithmetic_curry ("CURRY" arithmetic_or)


# --- Disjunction

?arithmetic_or: or_expr | xor_expr | arithmetic_and

or_expr: arithmetic_or "OR" arithmetic_and
xor_expr: arithmetic_or "XOR" arithmetic_and

# --- Conjunction

?arithmetic_and: and_expr | arithmetic_cmp

and_expr: arithmetic_and "AND" arithmetic_cmp

# --- Comparison

?arithmetic_cmp: comparison_chain | arithmetic_add

comparison_chain: arithmetic_add (comparison_symbol arithmetic_add)+

?comparison_symbol: "EQUALS" -> equal_to
                  | "NOT_EQUALS" -> not_equal_to
                  | "GTE" -> greater_than_or_equal_to
                  | "LTE" -> less_than_or_equal_to
                  | "ANGLE_OPEN" -> less_than
                  | "ANGLE_CLOSE" -> greater_than

# --- Addition/Subtraction

?arithmetic_add: addition | subtraction | concatenate | arithmetic_mul

addition: arithmetic_add "PLUS" arithmetic_mul
subtraction: arithmetic_add "MINUS" arithmetic_mul
concatenate: arithmetic_add "CONCAT" arithmetic_mul

# --- Multiplication/Division

?arithmetic_mul: multiply | divide | int_divide | modulus | arithmetic_pow

multiply: arithmetic_mul "TIMES" arithmetic_pow
divide: arithmetic_mul "DIVIDE" arithmetic_pow
int_divide: arithmetic_mul "INT_DIV" arithmetic_pow
modulus: arithmetic_mul "MOD" arithmetic_pow

# --- Exponentiation

?arithmetic_pow: raise_power | arithmetic_unary

raise_power: arithmetic_unary "POWER" arithmetic_pow

# --- Unary Operations

?arithmetic_unary: unary_negate | unary_not | atomic

unary_negate: "MINUS" atomic
unary_not: "NOT" atomic


# -- Element Selection and Slicing --

?select: select_element | select_slice
select_element: selectable_atomic "SQUARE_OPEN" expression "SQUARE_CLOSE"

select_slice: selectable_atomic "SQUARE_OPEN" _select_slice_inner "SQUARE_CLOSE"
_select_slice_inner: slice_start "COLON" slice_end slice_jump
slice_start: expression?
slice_end: expression?
slice_jump: ("BY" expression)?


# -- Lexer Declarations --

%declare EXEC_ARG
%declare NAME
%declare INTEGER
%declare FLOAT
%declare UNIT_INTEGER
%declare UNIT_FLOAT
%declare QUOTED_STRING
%declare TRUE
%declare FALSE