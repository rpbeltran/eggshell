?start: top_level_expression


# -- Expressions --

?top_level_expression: write_to_file | append_to_file | assignment | expression

?expression:  arithmetic
?atomic: pipeline | paren_expr | IDENTIFIER | QUOTED_STRING | number
?paren_expr: PAREN_OPEN expression PAREN_CLOSE


# -- Assignment --

?assignment: typed_assignment | untyped_assignment

typed_assignment: IDENTIFIER COLON IDENTIFIER ASSIGN expression
untyped_assignment: IDENTIFIER DECLARE expression


# -- File Redirection --

write_to_file: pipeline ANGLE_CLOSE (EXEC_ARG | IDENTIFIER | QUOTED_STRING)
append_to_file: pipeline APPEND_FILE (EXEC_ARG | IDENTIFIER | QUOTED_STRING)


# -- Arithmetic --

?arithmetic: addition | subtraction | arithmetic_2
?arithmetic_2: multiply | divide | int_divide | modulus | arithmetic_3
?arithmetic_3: raise_power | atomic

addition: arithmetic_2 PLUS arithmetic_2
subtraction: arithmetic_2 MINUS arithmetic_2

multiply: arithmetic_3 TIMES arithmetic_3
divide: arithmetic_3 DIVIDE arithmetic_3
int_divide: arithmetic_3 INT_DIV arithmetic_3
modulus: arithmetic_3 MOD arithmetic_3

raise_power: atomic POWER atomic

number: INTEGER | FLOAT


# -- Pipelines --

exec: EXEC_ARG+
?pipeline: exec (PIPE pipeline)*


# -- Lexer Declarations --

# - DFA Tokens

%declare EXEC_ARG
%declare FLOAT
%declare IDENTIFIER
%declare INTEGER
%declare QUOTED_STRING

# - Operators

%declare DECLARE
%declare APPEND_FILE
%declare INT_DIV
%declare COLON
%declare ASSIGN
%declare PIPE
%declare PAREN_OPEN
%declare PAREN_CLOSE
%declare CURLY_OPEN
%declare CURLY_CLOSE
%declare ANGLE_OPEN
%declare ANGLE_CLOSE
%declare SQUARE_OPEN
%declare SQUARE_CLOSE
%declare SEMICOLON
%declare CURRY
%declare PLUS
%declare MINUS
%declare DIVIDE
%declare TIMES
%declare MOD
%declare POWER

# - Keywords

%declare FN
%declare FOR
%declare WHILE
%declare CONTINUE
%declare BREAK
%declare TRUE
%declare FALSE
%declare AND
%declare OR
%declare XOR
%declare NOT
%declare RETURN
%declare IF
%declare ELSE
%declare USE
%declare TRY
%declare CATCH
