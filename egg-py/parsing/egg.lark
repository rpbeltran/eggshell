?start: top_level_expression


# -- Expressions --

?top_level_expression: (write_to_file | append_to_file | declaration | expression | pipeline | trycatch) "SEMICOLON"?

?expression: arithmetic
?atomic: exec | paren_expr | IDENTIFIER | QUOTED_STRING | lambda_func | number | logical_sequence
?paren_expr: "PAREN_OPEN" (expression | pipeline) "PAREN_CLOSE"


# -- Variable Declaration --

?declaration: typed_declaration | untyped_declaration

typed_declaration: IDENTIFIER "COLON" IDENTIFIER "ASSIGN" expression
untyped_declaration: IDENTIFIER "DECLARE" expression


# -- File Redirection --

write_to_file: pipeline "ANGLE_CLOSE" (EXEC_ARG | IDENTIFIER | QUOTED_STRING)
append_to_file: pipeline "APPEND_FILE" (EXEC_ARG | IDENTIFIER | QUOTED_STRING)


# -- Arithmetic --

?arithmetic: addition | subtraction | arithmetic_2
?arithmetic_2: multiply | divide | int_divide | modulus | arithmetic_3
?arithmetic_3: raise_power | atomic

addition: arithmetic_2 "PLUS" arithmetic_2
subtraction: arithmetic_2 "MINUS" arithmetic_2

multiply: arithmetic_3 "TIMES" arithmetic_3
divide: arithmetic_3 "DIVIDE" arithmetic_3
int_divide: arithmetic_3 "INT_DIV" arithmetic_3
modulus: arithmetic_3 "MOD" arithmetic_3

raise_power: atomic "POWER" atomic

number: INTEGER | FLOAT


# -- Pipelines --

exec: EXEC_ARG+
?pipeline: exec ("PIPE" pipeline_target)+
?pipeline_target: exec | lambda_func | IDENTIFIER

# -- Code Blocks --

block: "CURLY_OPEN" top_level_expression* "CURLY_CLOSE"

# -- Error Handling --

trycatch: "TRY" block "CATCH" block
logical_sequence: and_sequence | or_sequence
and_sequence: atomic "SEQ_AND" atomic
or_sequence:  atomic "SEQ_OR" atomic


# -- Lambdas --

lambda_func: "LAMBDA" signature_args "ARROW" lambda_body
?lambda_body: expression | block
?signature_args : PAREN_OPEN signature_arg (COMMA signature_arg)* PAREN_CLOSE | signature_arg
?signature_arg: IDENTIFIER (COLON IDENTIFIER)? (ASSIGN expression)?

# -- Lexer Declarations --

# - DFA Tokens

%declare EXEC_ARG
%declare FLOAT
%declare IDENTIFIER
%declare INTEGER
%declare QUOTED_STRING

# - Operators

%declare DECLARE
%declare APPEND_FILE
%declare INT_DIV
%declare COLON
%declare ASSIGN
%declare PIPE
%declare ARROW
%declare LAMBDA
%declare COMMA
%declare PAREN_OPEN
%declare PAREN_CLOSE
%declare CURLY_OPEN
%declare CURLY_CLOSE
%declare ANGLE_OPEN
%declare ANGLE_CLOSE
%declare SQUARE_OPEN
%declare SQUARE_CLOSE
%declare SEMICOLON
%declare CURRY
%declare PLUS
%declare MINUS
%declare DIVIDE
%declare TIMES
%declare MOD
%declare POWER
%declare SEQ_AND
%declare SEQ_OR

# - Keywords

%declare FN
%declare FOR
%declare WHILE
%declare CONTINUE
%declare BREAK
%declare TRUE
%declare FALSE
%declare AND
%declare OR
%declare XOR
%declare NOT
%declare RETURN
%declare IF
%declare ELSE
%declare USE
%declare TRY
%declare CATCH
