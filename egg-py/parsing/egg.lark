?start: expression

?expression: write_to_file | append_to_file | assignment | pipeline


?assignment: typed_assignment | untyped_assignment
typed_assignment: "var"? identifier ":" type "=" value
untyped_assignment: "var"? identifier ":=" value

?value: number | pipeline

number: SIGNED_INT | SIGNED_FLOAT

exec: STRICT_LITERAL LITERAL*

?pipeline: exec ("|" pipeline)*
write_to_file: pipeline ">" LITERAL
append_to_file: pipeline ">>" LITERAL


// todo: add a custom lexer with lookahead to make "@" optional
identifier: "@" VAR_NAME
type: VAR_NAME
VAR_NAME: /[a-zA-Z_][a-zA-Z_0-9]*/

STRICT_LITERAL: STRICT_UNQUOTED_LIT | SINGLE_QUOTED_LIT | DOUBLE_QUOTED_LIT
LITERAL: UNQUOTED_LIT | SINGLE_QUOTED_LIT | DOUBLE_QUOTED_LIT

STRICT_UNQUOTED_LIT: /([^\s\\'":=`0-9+-@]|(\\((\\){2})*[\s"'`:=]))+/
UNQUOTED_LIT: /([^\s\\'"`]|(\\((\\){2})*[\s"'`]))+/
SINGLE_QUOTED_LIT: /"((\\{2})*|((.|\n)*?[^\\](\\{2})*))"/
DOUBLE_QUOTED_LIT: /'((\\{2})*|((.|\n)*?[^\\](\\{2})*))'/
BACK_QUOTED_LIT: /`((\\{2})*|((.|\n)*?[^\\](\\{2})*))`/


%import common.SIGNED_INT
%import common.SIGNED_FLOAT
%import common.WS
// todo: add a custom lexer to require whitespace between args
%ignore WS